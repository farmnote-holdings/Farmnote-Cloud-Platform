# Cursor AI ルール - Farmnote Cloud Platform

## プロジェクト概要
このリポジトリはFarmnote Cloud Platform Ver.3のドキュメント管理リポジトリです。
農業データプラットフォームの開発に関するドキュメントを管理し、LLMを活用した効率的なドキュメント生成を支援します。

## 基本ルール

### 1. 言語
- ユーザーとのコミュニケーションは日本語で行う
- コード内のコメントも日本語で記述
- 技術用語は適切に日本語化するか、カタカナ表記を使用

### 2. ドキュメント作成
- Markdown形式で構造化されたドキュメントを作成
- 見出しは階層的に整理し、目次を作成しやすくする
- コードブロックには言語を明示する
- 表や図表を活用して視覚的に理解しやすくする

#### Markdownフォーマットルール

##### 見出し構造
- `#` は1つのファイルに1つだけ使用（タイトル）
- `##` でセクション区切り
- `###` でサブセクション
- `####` で詳細セクション
- 見出しの前後には空行を入れる

##### リスト形式
- 順序なしリストは `-` を使用
- 順序付きリストは `1.` を使用
- ネストは2スペースでインデント
- リスト項目の前後には空行を入れる

##### 強調とリンク
- **太字**は `**text**` で記述
- *斜体*は `*text*` で記述
- `コード`は `` `code` `` で記述
- [リンク](URL)は `[text](url)` で記述

##### コードブロック
- インラインコードは `` `code` ``
- コードブロックは ``` で囲む
- 言語指定は ```language で記述
- 例：```python, ```javascript, ```bash

##### 表の作成
- ヘッダー行の下に `| --- |` で区切り線
- セル内の `|` は `\|` でエスケープ
- 左寄せ、中央寄せ、右寄せは `:---`, `:---:`, `---:` で指定

##### 引用と注釈
- 引用は `> ` で開始
- 注釈は `[^1]` と `[^1]: 注釈内容` で記述

##### 画像とファイル
- 画像は `![alt text](path/to/image)`
- ファイルリンクは `[ファイル名](path/to/file)`

##### チェックリスト
- タスクリストは `- [ ]` で未完了
- 完了済みは `- [x]` で記述

##### 水平線
- セクション区切りには `---` を使用
- 前後に空行を入れる

##### ファイル末尾
- すべてのMarkdownファイルは末尾に改行を1つ入れる
- ファイル末尾の改行は必須とする

### 3. ファイル命名規則
- kebab-case（ハイフン区切り小文字）を使用
- 日付は`YYYYMMDD`形式
- 重要度プレフィックス：
  - `core-`: 基本戦略（変更頻度低）
  - `active-`: 現在検討中（変更頻度高）
  - `archive-`: アーカイブ（参照のみ）

## コンテキスト参照

### 重要なコンテキストファイル
以下のファイルを優先的に参照してください：

1. **製品理解**
   - `@docs/deepdive/Farmnote製品コンセプト.md`
   - `@docs/deepdive/Assistant機能ユースケース.md`

2. **用語集**
   - `@docs/knowledge/glossary/domain-glossary.md`
   - `@docs/knowledge/glossary/technical-glossary.md`

3. **テンプレート**
   - `@docs/context/templates/`配下のテンプレート

### コンテキスト指定パターン

#### 新機能検討時
```
@docs/deepdive/Farmnote製品コンセプト.md
@docs/context/templates/feature-priorities.md
```

#### アーキテクチャ検討時
```
@docs/context/prompt/technology-selection-prompt.md
@docs/context/templates/architecture-review-template.md
@docs/knowledge/technical-glossary.md
```

#### 議事録作成時
```
@docs/prompt/校正用プロンプト.md
@docs/meeting-note/
```

## ドメイン知識

### 農業ドメイン
- 酪農、畜産業界の専門用語を正確に使用
- ファームノートの既存製品（Farmnote、Farmnote Color）との整合性を保つ
- データ駆動型の意思決定支援を重視

### 技術スタック
- クラウドプラットフォームを前提とした設計
- スケーラビリティと信頼性を重視
- 既存システムとの連携を考慮

## ドキュメント作成ガイドライン

### 構造
1. 概要セクションを必ず含める
2. 目的と背景を明確にする
3. 具体的な実装や手順を記載
4. 関連ドキュメントへのリンクを含める

### トーン
- 専門的だが理解しやすい表現を使用
- 技術的な内容も非エンジニアが理解できるよう配慮
- 具体例を積極的に使用

### 品質チェック
- 誤字脱字のチェック
- 用語の一貫性確認
- リンクの有効性確認
- フォーマットの統一性確認

#### Markdown品質チェック項目
- 見出しの階層が適切か（1→2→3の順序）
- 空行の配置が適切か（見出しの前後、段落間）
- コードブロックに言語指定があるか
- リンクのURLが正しいか
- 表のセル数が一致しているか
- リストのインデントが統一されているか
- 強調記法の使用が適切か
- ファイル名やパスが正しいか
- ファイル末尾に改行があるか

## 作業時の注意事項

### ドキュメント更新時
1. 既存のドキュメント構造を尊重する
2. 変更履歴を適切に記録する
3. 関連ドキュメントも必要に応じて更新する

### 議事録作成時
1. `docs/prompt/校正用プロンプト.md`を活用
2. 生データは`meeting-record-rowData/`に保存
3. 校正版は`meeting-record/`に保存

### テンプレート使用時
1. プロジェクトの特性に応じてカスタマイズ
2. 評価基準を明確に定義
3. チーム全体での合意形成を重視

#### Markdownテンプレート活用
- 新規ドキュメント作成時は適切なテンプレートを参照
- 議事録は `docs/context/templates/` のテンプレートを使用
- 機能仕様書は既存の構造を踏襲
- アーキテクチャ文書は標準的な構成に従う

## 禁止事項
- `docs/temp/`配下のファイルをコミットしない
- 個人情報や機密情報を含めない
- 大きなバイナリファイルをコミットしない（Google Driveを使用）

## 推奨事項
- コミットメッセージは日本語で分かりやすく記述
- プルリクエストには変更内容の要約を含める
- レビュー依頼時は関連するコンテキストを明示する
